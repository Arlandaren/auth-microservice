Index: docker-compose.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>version: '3'\r\n\r\nservices:\r\n  nginx:\r\n    image: nginx:latest\r\n    restart: always\r\n    volumes:\r\n      - ./nginx.shield.conf:/etc/nginx/nginx.conf\r\n      - ./certificates:/certificates\r\n    ports:\r\n      - \"8081:8443\"\r\n      - \"8080:443\"\r\n      - \"8082:82\"\r\n    depends_on:\r\n      - auth_service\r\n    networks:\r\n      - monitoring\r\n    labels:\r\n      loki: 'true'\r\n\r\n  postgres:\r\n    image: postgres:latest\r\n    restart: always\r\n    environment:\r\n      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}\r\n      - POSTGRES_USER=${POSTGRES_USER}\r\n      - POSTGRES_DB=${POSTGRES_DB}\r\n      - PGDATA=/var/lib/postgresql/data/pgdata\r\n    volumes:\r\n      - pg_data:/var/lib/postgresql/data/pgdata\r\n    ports:\r\n      - \"5434:5432\"\r\n    networks:\r\n      - monitoring\r\n    labels:\r\n      loki: 'true'\r\n\r\n  auth_service:\r\n    build: .\r\n    environment:\r\n      - PG_STRING=${PG_STRING}\r\n      - GRPC_ADDRESS=${GRPC_ADDRESS}\r\n      - HTTP_ADDRESS=${HTTP_ADDRESS}\r\n    volumes:\r\n      - .:/app\r\n      - ./certificates:/opt/certificates\r\n    depends_on:\r\n      - postgres\r\n    restart: always\r\n    ports:\r\n      - \"8090:8086\"\r\n      - \"8091:50051\"\r\n      - \"9000:9000\"\r\n    networks:\r\n      - monitoring\r\n    labels:\r\n      loki: 'true'\r\n\r\n  prometheus:\r\n    image: prom/prometheus:latest\r\n    volumes:\r\n      - ./prometheus.yml:/etc/prometheus/prometheus.yml\r\n    ports:\r\n      - \"9090:9090\"\r\n    depends_on:\r\n      - nginx-exporter\r\n    networks:\r\n      - monitoring\r\n\r\n  grafana:\r\n    image: grafana/grafana:latest\r\n    ports:\r\n      - \"3000:3000\"\r\n    depends_on:\r\n      - prometheus\r\n      - loki\r\n    networks:\r\n      - monitoring\r\n\r\n  nginx-exporter:\r\n    image: nginx/nginx-prometheus-exporter:latest\r\n    ports:\r\n      - \"9113:9113\"\r\n    command: >\r\n      -nginx.scrape-uri http://nginx:82/nginx_status\r\n      -web.listen-address :9113\r\n      -web.telemetry-path /metrics\r\n    depends_on:\r\n      - nginx\r\n    networks:\r\n      - monitoring\r\n\r\n  loki:\r\n    image: grafana/loki:2.8.2\r\n    ports:\r\n      - \"3100:3100\"\r\n    volumes:\r\n      - ./loki-config.yaml:/etc/loki/local-config.yaml\r\n      - ./loki-data:/loki\r\n    command: -config.file=/etc/loki/local-config.yaml\r\n    networks:\r\n      - monitoring\r\n    user: \"root\"\r\n\r\n\r\n  promtail:\r\n    image: grafana/promtail:2.8.2\r\n    volumes:\r\n      - /var/log:/var/log\r\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\r\n      - /var/run/docker.sock:/var/run/docker.sock\r\n      - ./promtail-config.yaml:/etc/promtail/promtail.yaml\r\n    command: -config.file=/etc/promtail/promtail.yaml\r\n    depends_on:\r\n      - loki\r\n    networks:\r\n      - monitoring\r\n\r\nvolumes:\r\n  pg_data:\r\n\r\nnetworks:\r\n  monitoring:\r\n    driver: bridge\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/docker-compose.yml b/docker-compose.yml
--- a/docker-compose.yml	(revision 05623e4e1f211c5fc33e3a2454089c1422e994e2)
+++ b/docker-compose.yml	(date 1732123987236)
@@ -41,6 +41,7 @@
       - PG_STRING=${PG_STRING}
       - GRPC_ADDRESS=${GRPC_ADDRESS}
       - HTTP_ADDRESS=${HTTP_ADDRESS}
+      - jwt_key=${jwt_key}
     volumes:
       - .:/app
       - ./certificates:/opt/certificates
Index: cmd/tls/generate_cert.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\r\n\r\nimport (\r\n\t\"crypto/ecdsa\"\r\n\t\"crypto/elliptic\"\r\n\t\"crypto/rand\"\r\n\t\"crypto/x509\"\r\n\t\"crypto/x509/pkix\"\r\n\t\"encoding/pem\"\r\n\t\"io/ioutil\"\r\n\t\"log\"\r\n\t\"math/big\"\r\n\t\"os\"\r\n\t\"path/filepath\"\r\n\t\"time\"\r\n)\r\n\r\nfunc main() {\r\n\t// Создаем CA-сертификат\r\n\tcaKey, caCert := CreateCACertificate()\r\n\r\n\t// Создаем сертификат сервера, подписанный CA\r\n\tCreateServerCertificate(caKey, caCert)\r\n\r\n\t// Создаем сертификат клиента, подписанный CA\r\n\tCreateClientCertificate(caKey, caCert)\r\n}\r\n\r\n// GeneratePrivateKey генерирует приватный ключ ECDSA\r\nfunc GeneratePrivateKey() *ecdsa.PrivateKey {\r\n\tprivateKey, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Не удалось сгенерировать приватный ключ: %v\", err)\r\n\t}\r\n\treturn privateKey\r\n}\r\n\r\n// CreateCACertificate создает CA-сертификат и приватный ключ\r\nfunc CreateCACertificate() (*ecdsa.PrivateKey, *x509.Certificate) {\r\n\tserialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)\r\n\tserialNumber, err := rand.Int(rand.Reader, serialNumberLimit)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Не удалось сгенерировать серийный номер: %v\", err)\r\n\t}\r\n\r\n\tcaTemplate := x509.Certificate{\r\n\t\tSerialNumber: serialNumber,\r\n\t\tSubject: pkix.Name{\r\n\t\t\tOrganization: []string{\"MyCA\"},\r\n\t\t},\r\n\t\tNotBefore: time.Now(),\r\n\t\tNotAfter:  time.Now().Add(365 * 24 * time.Hour),\r\n\r\n\t\tKeyUsage:              x509.KeyUsageCertSign | x509.KeyUsageDigitalSignature,\r\n\t\tBasicConstraintsValid: true,\r\n\t\tIsCA:                  true, // Это CA-сертификат\r\n\t}\r\n\r\n\tprivateKey := GeneratePrivateKey()\r\n\r\n\tderBytes, err := x509.CreateCertificate(rand.Reader, &caTemplate, &caTemplate, &privateKey.PublicKey, privateKey)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Не удалось создать CA-сертификат: %v\", err)\r\n\t}\r\n\r\n\t// Убедимся, что директория certificates существует\r\n\toutputDir := \"certificates\"\r\n\tif err := os.MkdirAll(outputDir, os.ModePerm); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось создать директорию %s: %v\", outputDir, err)\r\n\t}\r\n\r\n\t// Записываем CA-сертификат в PEM формате\r\n\tcaCertPEMPath := filepath.Join(outputDir, \"caCertificate.pem\")\r\n\tpemCertificate := pem.EncodeToMemory(&pem.Block{Type: \"CERTIFICATE\", Bytes: derBytes})\r\n\tif err := ioutil.WriteFile(caCertPEMPath, pemCertificate, 0644); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось записать CA-сертификат PEM: %v\", err)\r\n\t}\r\n\tlog.Println(\"caCertificate.pem был успешно создан\")\r\n\r\n\t// Записываем CA-сертификат в DER формате (.crt)\r\n\tcaCertCRTPath := filepath.Join(outputDir, \"caCertificate.crt\")\r\n\tif err := ioutil.WriteFile(caCertCRTPath, derBytes, 0644); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось записать CA-сертификат CRT: %v\", err)\r\n\t}\r\n\tlog.Println(\"caCertificate.crt был успешно создан\")\r\n\r\n\t// Записываем приватный ключ CA\r\n\tprivBytes, err := x509.MarshalPKCS8PrivateKey(privateKey)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Не удалось маршализовать приватный ключ: %v\", err)\r\n\t}\r\n\tpemKey := pem.EncodeToMemory(&pem.Block{Type: \"EC PRIVATE KEY\", Bytes: privBytes})\r\n\tcaKeyPath := filepath.Join(outputDir, \"caPrivateKey.pem\")\r\n\tif err := ioutil.WriteFile(caKeyPath, pemKey, 0600); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось записать приватный ключ CA: %v\", err)\r\n\t}\r\n\tlog.Println(\"caPrivateKey.pem был успешно создан\")\r\n\r\n\treturn privateKey, &caTemplate\r\n}\r\n\r\n// CreateServerCertificate создает сертификат сервера, подписанный CA\r\nfunc CreateServerCertificate(caKey *ecdsa.PrivateKey, caCertificate *x509.Certificate) {\r\n\tserialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)\r\n\tserialNumber, err := rand.Int(rand.Reader, serialNumberLimit)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Не удалось сгенерировать серийный номер: %v\", err)\r\n\t}\r\n\r\n\ttemplate := x509.Certificate{\r\n\t\tSerialNumber: serialNumber,\r\n\t\tSubject: pkix.Name{\r\n\t\t\tOrganization: []string{\"BusinezzHack\"},\r\n\t\t},\r\n\t\tDNSNames:  []string{\"localhost\", \"auth_service\"},\r\n\t\tNotBefore: time.Now(),\r\n\t\tNotAfter:  time.Now().Add(365 * 24 * time.Hour),\r\n\r\n\t\tKeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,\r\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth},\r\n\t\tBasicConstraintsValid: true,\r\n\t}\r\n\r\n\tprivateKey := GeneratePrivateKey()\r\n\r\n\tderBytes, err := x509.CreateCertificate(rand.Reader, &template, caCertificate, &privateKey.PublicKey, caKey)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Не удалось создать сертификат сервера: %v\", err)\r\n\t}\r\n\r\n\t// Убедимся, что директория certificates существует\r\n\toutputDir := \"certificates\"\r\n\tif err := os.MkdirAll(outputDir, os.ModePerm); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось создать директорию %s: %v\", outputDir, err)\r\n\t}\r\n\r\n\t// Записываем сертификат сервера в PEM формате\r\n\tserverCertPEMPath := filepath.Join(outputDir, \"serverCertificate.pem\")\r\n\tpemCertificate := pem.EncodeToMemory(&pem.Block{Type: \"CERTIFICATE\", Bytes: derBytes})\r\n\tif err := ioutil.WriteFile(serverCertPEMPath, pemCertificate, 0644); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось записать сертификат сервера PEM: %v\", err)\r\n\t}\r\n\tlog.Println(\"serverCertificate.pem был успешно создан\")\r\n\r\n\t// Записываем сертификат сервера в DER формате (.crt)\r\n\tserverCertCRTPath := filepath.Join(outputDir, \"serverCertificate.crt\")\r\n\tif err := ioutil.WriteFile(serverCertCRTPath, derBytes, 0644); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось записать сертификат сервера CRT: %v\", err)\r\n\t}\r\n\tlog.Println(\"serverCertificate.crt был успешно создан\")\r\n\r\n\t// Записываем приватный ключ сервера\r\n\tprivBytes, err := x509.MarshalPKCS8PrivateKey(privateKey)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Не удалось маршализовать приватный ключ сервера: %v\", err)\r\n\t}\r\n\tpemKey := pem.EncodeToMemory(&pem.Block{Type: \"EC PRIVATE KEY\", Bytes: privBytes})\r\n\tserverKeyPath := filepath.Join(outputDir, \"serverPrivateKey.pem\")\r\n\tif err := ioutil.WriteFile(serverKeyPath, pemKey, 0600); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось записать приватный ключ сервера: %v\", err)\r\n\t}\r\n\tlog.Println(\"serverPrivateKey.pem был успешно создан\")\r\n}\r\n\r\n// CreateClientCertificate создает сертификат клиента, подписанный CA\r\nfunc CreateClientCertificate(caKey *ecdsa.PrivateKey, caCertificate *x509.Certificate) {\r\n\tserialNumberLimit := new(big.Int).Lsh(big.NewInt(1), 128)\r\n\tserialNumber, err := rand.Int(rand.Reader, serialNumberLimit)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Не удалось сгенерировать серийный номер: %v\", err)\r\n\t}\r\n\r\n\ttemplate := x509.Certificate{\r\n\t\tSerialNumber: serialNumber,\r\n\t\tSubject: pkix.Name{\r\n\t\t\tOrganization: []string{\"BusinezzHack\"},\r\n\t\t},\r\n\t\tNotBefore: time.Now(),\r\n\t\tNotAfter:  time.Now().Add(365 * 24 * time.Hour),\r\n\r\n\t\tKeyUsage:              x509.KeyUsageDigitalSignature,\r\n\t\tExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageClientAuth},\r\n\t\tBasicConstraintsValid: true,\r\n\t}\r\n\r\n\tprivateKey := GeneratePrivateKey()\r\n\r\n\tderBytes, err := x509.CreateCertificate(rand.Reader, &template, caCertificate, &privateKey.PublicKey, caKey)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Не удалось создать сертификат клиента: %v\", err)\r\n\t}\r\n\r\n\t// Убедимся, что директория certificates существует\r\n\toutputDir := \"certificates\"\r\n\tif err := os.MkdirAll(outputDir, os.ModePerm); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось создать директорию %s: %v\", outputDir, err)\r\n\t}\r\n\r\n\t// Записываем сертификат клиента в PEM формате\r\n\tclientCertPEMPath := filepath.Join(outputDir, \"clientCertificate.pem\")\r\n\tpemCertificate := pem.EncodeToMemory(&pem.Block{Type: \"CERTIFICATE\", Bytes: derBytes})\r\n\tif err := ioutil.WriteFile(clientCertPEMPath, pemCertificate, 0644); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось записать сертификат клиента PEM: %v\", err)\r\n\t}\r\n\tlog.Println(\"clientCertificate.pem был успешно создан\")\r\n\r\n\t// Записываем сертификат клиента в DER формате (.crt)\r\n\tclientCertCRTPath := filepath.Join(outputDir, \"clientCertificate.crt\")\r\n\tif err := ioutil.WriteFile(clientCertCRTPath, derBytes, 0644); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось записать сертификат клиента CRT: %v\", err)\r\n\t}\r\n\tlog.Println(\"clientCertificate.crt был успешно создан\")\r\n\r\n\t// Записываем приватный ключ клиента\r\n\tprivBytes, err := x509.MarshalPKCS8PrivateKey(privateKey)\r\n\tif err != nil {\r\n\t\tlog.Fatalf(\"Не удалось маршализовать приватный ключ клиента: %v\", err)\r\n\t}\r\n\tpemKey := pem.EncodeToMemory(&pem.Block{Type: \"EC PRIVATE KEY\", Bytes: privBytes})\r\n\tclientKeyPath := filepath.Join(outputDir, \"clientPrivateKey.pem\")\r\n\tif err := ioutil.WriteFile(clientKeyPath, pemKey, 0600); err != nil {\r\n\t\tlog.Fatalf(\"Не удалось записать приватный ключ клиента: %v\", err)\r\n\t}\r\n\tlog.Println(\"clientPrivateKey.pem был успешно создан\")\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/cmd/tls/generate_cert.go b/cmd/tls/generate_cert.go
--- a/cmd/tls/generate_cert.go	(revision 05623e4e1f211c5fc33e3a2454089c1422e994e2)
+++ b/cmd/tls/generate_cert.go	(date 1732130706233)
@@ -13,6 +13,8 @@
 	"os"
 	"path/filepath"
 	"time"
+
+	"software.sslmate.com/src/go-pkcs12"
 )
 
 func main() {
@@ -89,7 +91,7 @@
 	if err != nil {
 		log.Fatalf("Не удалось маршализовать приватный ключ: %v", err)
 	}
-	pemKey := pem.EncodeToMemory(&pem.Block{Type: "EC PRIVATE KEY", Bytes: privBytes})
+	pemKey := pem.EncodeToMemory(&pem.Block{Type: "PRIVATE KEY", Bytes: privBytes})
 	caKeyPath := filepath.Join(outputDir, "caPrivateKey.pem")
 	if err := ioutil.WriteFile(caKeyPath, pemKey, 0600); err != nil {
 		log.Fatalf("Не удалось записать приватный ключ CA: %v", err)
@@ -154,7 +156,7 @@
 	if err != nil {
 		log.Fatalf("Не удалось маршализовать приватный ключ сервера: %v", err)
 	}
-	pemKey := pem.EncodeToMemory(&pem.Block{Type: "EC PRIVATE KEY", Bytes: privBytes})
+	pemKey := pem.EncodeToMemory(&pem.Block{Type: "PRIVATE KEY", Bytes: privBytes})
 	serverKeyPath := filepath.Join(outputDir, "serverPrivateKey.pem")
 	if err := ioutil.WriteFile(serverKeyPath, pemKey, 0600); err != nil {
 		log.Fatalf("Не удалось записать приватный ключ сервера: %v", err)
@@ -216,10 +218,22 @@
 	if err != nil {
 		log.Fatalf("Не удалось маршализовать приватный ключ клиента: %v", err)
 	}
-	pemKey := pem.EncodeToMemory(&pem.Block{Type: "EC PRIVATE KEY", Bytes: privBytes})
+	pemKey := pem.EncodeToMemory(&pem.Block{Type: "PRIVATE KEY", Bytes: privBytes})
 	clientKeyPath := filepath.Join(outputDir, "clientPrivateKey.pem")
 	if err := ioutil.WriteFile(clientKeyPath, pemKey, 0600); err != nil {
 		log.Fatalf("Не удалось записать приватный ключ клиента: %v", err)
 	}
 	log.Println("clientPrivateKey.pem был успешно создан")
+
+	// Генерация PKCS#12 (.p12) файла для клиента
+	pfxData, err := pkcs12.Encode(rand.Reader, privateKey, &template, []*x509.Certificate{caCertificate}, "your_password")
+	if err != nil {
+		log.Fatalf("Не удалось создать PKCS#12 файл: %v", err)
+	}
+
+	clientP12Path := filepath.Join(outputDir, "clientCertificate.p12")
+	if err := ioutil.WriteFile(clientP12Path, pfxData, 0600); err != nil {
+		log.Fatalf("Не удалось записать PKCS#12 файл: %v", err)
+	}
+	log.Println("clientCertificate.p12 был успешно создан. Используйте этот файл для импорта в браузер.")
 }
Index: go.mod
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>module service\r\n\r\ngo 1.23.2\r\n\r\nrequire (\r\n\tgithub.com/golang-jwt/jwt v3.2.2+incompatible\r\n\tgithub.com/grpc-ecosystem/grpc-gateway/v2 v2.23.0\r\n\tgithub.com/prometheus/client_golang v1.20.5\r\n\tgithub.com/sirupsen/logrus v1.9.3\r\n\tgolang.org/x/crypto v0.27.0\r\n\tgoogle.golang.org/genproto/googleapis/api v0.0.0-20241021214115-324edc3d5d38\r\n\tgoogle.golang.org/grpc v1.67.1\r\n\tgoogle.golang.org/protobuf v1.35.1\r\n\tgorm.io/driver/postgres v1.5.9\r\n\tgorm.io/gorm v1.25.12\r\n)\r\n\r\nrequire (\r\n\tgithub.com/beorn7/perks v1.0.1 // indirect\r\n\tgithub.com/cespare/xxhash/v2 v2.3.0 // indirect\r\n\tgithub.com/jackc/pgpassfile v1.0.0 // indirect\r\n\tgithub.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 // indirect\r\n\tgithub.com/jackc/pgx/v5 v5.7.1 // indirect\r\n\tgithub.com/jackc/puddle/v2 v2.2.2 // indirect\r\n\tgithub.com/jinzhu/inflection v1.0.0 // indirect\r\n\tgithub.com/jinzhu/now v1.1.5 // indirect\r\n\tgithub.com/klauspost/compress v1.17.9 // indirect\r\n\tgithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 // indirect\r\n\tgithub.com/prometheus/client_model v0.6.1 // indirect\r\n\tgithub.com/prometheus/common v0.55.0 // indirect\r\n\tgithub.com/prometheus/procfs v0.15.1 // indirect\r\n\tgolang.org/x/net v0.29.0 // indirect\r\n\tgolang.org/x/sync v0.8.0 // indirect\r\n\tgolang.org/x/sys v0.25.0 // indirect\r\n\tgolang.org/x/text v0.19.0 // indirect\r\n\tgoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241021214115-324edc3d5d38 // indirect\r\n)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.mod b/go.mod
--- a/go.mod	(revision 05623e4e1f211c5fc33e3a2454089c1422e994e2)
+++ b/go.mod	(date 1732130618917)
@@ -13,6 +13,7 @@
 	google.golang.org/protobuf v1.35.1
 	gorm.io/driver/postgres v1.5.9
 	gorm.io/gorm v1.25.12
+	software.sslmate.com/src/go-pkcs12 v0.5.0
 )
 
 require (
Index: go.sum
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>github.com/beorn7/perks v1.0.1 h1:VlbKKnNfV8bJzeqoa4cOKqO6bYr3WgKZxO8Z16+hsOM=\r\ngithub.com/beorn7/perks v1.0.1/go.mod h1:G2ZrVWU2WbWT9wwq4/hrbKbnv/1ERSJQ0ibhJ6rlkpw=\r\ngithub.com/cespare/xxhash/v2 v2.3.0 h1:UL815xU9SqsFlibzuggzjXhog7bL6oX9BbNZnL2UFvs=\r\ngithub.com/cespare/xxhash/v2 v2.3.0/go.mod h1:VGX0DQ3Q6kWi7AoAeZDth3/j3BFtOZR5XLFGgcrjCOs=\r\ngithub.com/davecgh/go-spew v1.1.0/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\r\ngithub.com/davecgh/go-spew v1.1.1 h1:vj9j/u1bqnvCEfJOwUhtlOARqs3+rkHYY13jYWTU97c=\r\ngithub.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=\r\ngithub.com/golang-jwt/jwt v3.2.2+incompatible h1:IfV12K8xAKAnZqdXVzCZ+TOjboZ2keLg81eXfW3O+oY=\r\ngithub.com/golang-jwt/jwt v3.2.2+incompatible/go.mod h1:8pz2t5EyA70fFQQSrl6XZXzqecmYZeUEB8OUGHkxJ+I=\r\ngithub.com/google/go-cmp v0.6.0 h1:ofyhxvXcZhMsU5ulbFiLKl/XBFqE1GSq7atu8tAmTRI=\r\ngithub.com/google/go-cmp v0.6.0/go.mod h1:17dUlkBOakJ0+DkrSSNjCkIjxS6bF9zb3elmeNGIjoY=\r\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.23.0 h1:ad0vkEBuk23VJzZR9nkLVG0YAoN9coASF1GusYX6AlU=\r\ngithub.com/grpc-ecosystem/grpc-gateway/v2 v2.23.0/go.mod h1:igFoXX2ELCW06bol23DWPB5BEWfZISOzSP5K2sbLea0=\r\ngithub.com/jackc/pgpassfile v1.0.0 h1:/6Hmqy13Ss2zCq62VdNG8tM1wchn8zjSGOBJ6icpsIM=\r\ngithub.com/jackc/pgpassfile v1.0.0/go.mod h1:CEx0iS5ambNFdcRtxPj5JhEz+xB6uRky5eyVu/W2HEg=\r\ngithub.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761 h1:iCEnooe7UlwOQYpKFhBabPMi4aNAfoODPEFNiAnClxo=\r\ngithub.com/jackc/pgservicefile v0.0.0-20240606120523-5a60cdf6a761/go.mod h1:5TJZWKEWniPve33vlWYSoGYefn3gLQRzjfDlhSJ9ZKM=\r\ngithub.com/jackc/pgx/v5 v5.7.1 h1:x7SYsPBYDkHDksogeSmZZ5xzThcTgRz++I5E+ePFUcs=\r\ngithub.com/jackc/pgx/v5 v5.7.1/go.mod h1:e7O26IywZZ+naJtWWos6i6fvWK+29etgITqrqHLfoZA=\r\ngithub.com/jackc/puddle/v2 v2.2.2 h1:PR8nw+E/1w0GLuRFSmiioY6UooMp6KJv0/61nB7icHo=\r\ngithub.com/jackc/puddle/v2 v2.2.2/go.mod h1:vriiEXHvEE654aYKXXjOvZM39qJ0q+azkZFrfEOc3H4=\r\ngithub.com/jinzhu/inflection v1.0.0 h1:K317FqzuhWc8YvSVlFMCCUb36O/S9MCKRDI7QkRKD/E=\r\ngithub.com/jinzhu/inflection v1.0.0/go.mod h1:h+uFLlag+Qp1Va5pdKtLDYj+kHp5pxUVkryuEj+Srlc=\r\ngithub.com/jinzhu/now v1.1.5 h1:/o9tlHleP7gOFmsnYNz3RGnqzefHA47wQpKrrdTIwXQ=\r\ngithub.com/jinzhu/now v1.1.5/go.mod h1:d3SSVoowX0Lcu0IBviAWJpolVfI5UJVZZ7cO71lE/z8=\r\ngithub.com/klauspost/compress v1.17.9 h1:6KIumPrER1LHsvBVuDa0r5xaG0Es51mhhB9BQB2qeMA=\r\ngithub.com/klauspost/compress v1.17.9/go.mod h1:Di0epgTjJY877eYKx5yC51cX2A2Vl2ibi7bDH9ttBbw=\r\ngithub.com/kylelemons/godebug v1.1.0 h1:RPNrshWIDI6G2gRW9EHilWtl7Z6Sb1BR0xunSBf0SNc=\r\ngithub.com/kylelemons/godebug v1.1.0/go.mod h1:9/0rRGxNHcop5bhtWyNeEfOS8JIWk580+fNqagV/RAw=\r\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822 h1:C3w9PqII01/Oq1c1nUAm88MOHcQC9l5mIlSMApZMrHA=\r\ngithub.com/munnerz/goautoneg v0.0.0-20191010083416-a7dc8b61c822/go.mod h1:+n7T8mK8HuQTcFwEeznm/DIxMOiR9yIdICNftLE1DvQ=\r\ngithub.com/pmezard/go-difflib v1.0.0 h1:4DBwDE0NGyQoBHbLQYPwSUPoCMWR5BEzIk/f1lZbAQM=\r\ngithub.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=\r\ngithub.com/prometheus/client_golang v1.20.5 h1:cxppBPuYhUnsO6yo/aoRol4L7q7UFfdm+bR9r+8l63Y=\r\ngithub.com/prometheus/client_golang v1.20.5/go.mod h1:PIEt8X02hGcP8JWbeHyeZ53Y/jReSnHgO035n//V5WE=\r\ngithub.com/prometheus/client_model v0.6.1 h1:ZKSh/rekM+n3CeS952MLRAdFwIKqeY8b62p8ais2e9E=\r\ngithub.com/prometheus/client_model v0.6.1/go.mod h1:OrxVMOVHjw3lKMa8+x6HeMGkHMQyHDk9E3jmP2AmGiY=\r\ngithub.com/prometheus/common v0.55.0 h1:KEi6DK7lXW/m7Ig5i47x0vRzuBsHuvJdi5ee6Y3G1dc=\r\ngithub.com/prometheus/common v0.55.0/go.mod h1:2SECS4xJG1kd8XF9IcM1gMX6510RAEL65zxzNImwdc8=\r\ngithub.com/prometheus/procfs v0.15.1 h1:YagwOFzUgYfKKHX6Dr+sHT7km/hxC76UB0learggepc=\r\ngithub.com/prometheus/procfs v0.15.1/go.mod h1:fB45yRUv8NstnjriLhBQLuOUt+WW4BsoGhij/e3PBqk=\r\ngithub.com/sirupsen/logrus v1.9.3 h1:dueUQJ1C2q9oE3F7wvmSGAaVtTmUizReu6fjN8uqzbQ=\r\ngithub.com/sirupsen/logrus v1.9.3/go.mod h1:naHLuLoDiP4jHNo9R0sCBMtWGeIprob74mVsIT4qYEQ=\r\ngithub.com/stretchr/objx v0.1.0/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=\r\ngithub.com/stretchr/testify v1.3.0/go.mod h1:M5WIy9Dh21IEIfnGCwXGc5bZfKNJtfHm1UVUgZn+9EI=\r\ngithub.com/stretchr/testify v1.7.0/go.mod h1:6Fq8oRcR53rry900zMqJjRRixrwX3KX962/h/Wwjteg=\r\ngithub.com/stretchr/testify v1.9.0 h1:HtqpIVDClZ4nwg75+f6Lvsy/wHu+3BoSGCbBAcpTsTg=\r\ngithub.com/stretchr/testify v1.9.0/go.mod h1:r2ic/lqez/lEtzL7wO/rwa5dbSLXVDPFyf8C91i36aY=\r\ngolang.org/x/crypto v0.27.0 h1:GXm2NjJrPaiv/h1tb2UH8QfgC/hOf/+z0p6PT8o1w7A=\r\ngolang.org/x/crypto v0.27.0/go.mod h1:1Xngt8kV6Dvbssa53Ziq6Eqn0HqbZi5Z6R0ZpwQzt70=\r\ngolang.org/x/net v0.29.0 h1:5ORfpBpCs4HzDYoodCDBbwHzdR5UrLBZ3sOnUJmFoHo=\r\ngolang.org/x/net v0.29.0/go.mod h1:gLkgy8jTGERgjzMic6DS9+SP0ajcu6Xu3Orq/SpETg0=\r\ngolang.org/x/sync v0.8.0 h1:3NFvSEYkUoMifnESzZl15y791HH1qU2xm6eCJU5ZPXQ=\r\ngolang.org/x/sync v0.8.0/go.mod h1:Czt+wKu1gCyEFDUtn0jG5QVvpJ6rzVqr5aXyt9drQfk=\r\ngolang.org/x/sys v0.0.0-20220715151400-c0bba94af5f8/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\r\ngolang.org/x/sys v0.25.0 h1:r+8e+loiHxRqhXVl6ML1nO3l1+oFoWbnlu2Ehimmi34=\r\ngolang.org/x/sys v0.25.0/go.mod h1:/VUhepiaJMQUp4+oa/7Zr1D23ma6VTLIYjOOTFZPUcA=\r\ngolang.org/x/text v0.19.0 h1:kTxAhCbGbxhK0IwgSKiMO5awPoDQ0RpfiVYBfK860YM=\r\ngolang.org/x/text v0.19.0/go.mod h1:BuEKDfySbSR4drPmRPG/7iBdf8hvFMuRexcpahXilzY=\r\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241021214115-324edc3d5d38 h1:2oV8dfuIkM1Ti7DwXc0BJfnwr9csz4TDXI9EmiI+Rbw=\r\ngoogle.golang.org/genproto/googleapis/api v0.0.0-20241021214115-324edc3d5d38/go.mod h1:vuAjtvlwkDKF6L1GQ0SokiRLCGFfeBUXWr/aFFkHACc=\r\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241021214115-324edc3d5d38 h1:zciRKQ4kBpFgpfC5QQCVtnnNAcLIqweL7plyZRQHVpI=\r\ngoogle.golang.org/genproto/googleapis/rpc v0.0.0-20241021214115-324edc3d5d38/go.mod h1:GX3210XPVPUjJbTUbvwI8f2IpZDMZuPJWDzDuebbviI=\r\ngoogle.golang.org/grpc v1.67.1 h1:zWnc1Vrcno+lHZCOofnIMvycFcc0QRGIzm9dhnDX68E=\r\ngoogle.golang.org/grpc v1.67.1/go.mod h1:1gLDyUQU7CTLJI90u3nXZ9ekeghjeM7pTDZlqFNg2AA=\r\ngoogle.golang.org/protobuf v1.35.1 h1:m3LfL6/Ca+fqnjnlqQXNpFPABW1UD7mjh8KO2mKFytA=\r\ngoogle.golang.org/protobuf v1.35.1/go.mod h1:9fA7Ob0pmnwhb644+1+CVWFRbNajQ6iRojtC/QF5bRE=\r\ngopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=\r\ngopkg.in/yaml.v3 v3.0.0-20200313102051-9f266ea9e77c/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\r\ngopkg.in/yaml.v3 v3.0.1 h1:fxVm/GzAzEWqLHuvctI91KS9hhNmmWOoWu0XTYJS7CA=\r\ngopkg.in/yaml.v3 v3.0.1/go.mod h1:K4uyk7z7BCEPqu6E+C64Yfv1cQ7kz7rIZviUmN+EgEM=\r\ngorm.io/driver/postgres v1.5.9 h1:DkegyItji119OlcaLjqN11kHoUgZ/j13E0jkJZgD6A8=\r\ngorm.io/driver/postgres v1.5.9/go.mod h1:DX3GReXH+3FPWGrrgffdvCk3DQ1dwDPdmbenSkweRGI=\r\ngorm.io/gorm v1.25.12 h1:I0u8i2hWQItBq1WfE0o2+WuL9+8L21K9e2HHSTE/0f8=\r\ngorm.io/gorm v1.25.12/go.mod h1:xh7N7RHfYlNc5EmcI/El95gXusucDrQnHXe0+CgWcLQ=\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/go.sum b/go.sum
--- a/go.sum	(revision 05623e4e1f211c5fc33e3a2454089c1422e994e2)
+++ b/go.sum	(date 1732130618916)
@@ -73,3 +73,5 @@
 gorm.io/driver/postgres v1.5.9/go.mod h1:DX3GReXH+3FPWGrrgffdvCk3DQ1dwDPdmbenSkweRGI=
 gorm.io/gorm v1.25.12 h1:I0u8i2hWQItBq1WfE0o2+WuL9+8L21K9e2HHSTE/0f8=
 gorm.io/gorm v1.25.12/go.mod h1:xh7N7RHfYlNc5EmcI/El95gXusucDrQnHXe0+CgWcLQ=
+software.sslmate.com/src/go-pkcs12 v0.5.0 h1:EC6R394xgENTpZ4RltKydeDUjtlM5drOYIG9c6TVj2M=
+software.sslmate.com/src/go-pkcs12 v0.5.0/go.mod h1:Qiz0EyvDRJjjxGyUQa2cCNZn/wMyzrRJ/qcDXOQazLI=
